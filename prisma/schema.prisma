// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(cuid())
  email String @unique
  name  String
  image String @default("ai-23.png")

  Messages Message[]

  createdAt DateTime   @default(now())
  Chatroom  Chatroom[]

  Configs Config[]
}

model Chatroom {
  id String @id @default(cuid())

  image String @default("ai-4.png")

  name           String // Optional name for the chatroom
  model          String // OpenAI model used for the chatroom
  maxToken       Int      @default(250) // Max token for the chatroom
  directive      String? // System directive for OpenAI
  voice          String? // Voice used for the chatroom
  voiceStability Decimal?
  voiceClarity   Decimal?

  userId String // The user who created the chatroom
  User   User   @relation(fields: [userId], references: [id])

  RoomFeatures RoomFeature[]

  createdAt DateTime  @default(now())
  Messages  Message[]
}

model Message {
  id String @id @default(cuid())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId String

  content String

  senderType SenderType
  createdAt  DateTime   @default(now())

  isFavorite Boolean @default(false)

  Voice Bytes?

  // Fetching messages by chatroom and createdAt
  @@index([chatroomId, createdAt])
  // Fetching messages by user and chatroom
  @@index([userId, chatroomId])
}

enum SenderType {
  System
  User
  Assistant
}

enum Application {
  OpenAI
  ElevenLabs
}

enum ConfigType {
  Key
  Voice
}

model Config {
  id String @id @default(cuid())

  application Application
  type        ConfigType

  key String // The key of the config

  userId String?
  User   User?   @relation(fields: [userId], references: [id])

  @@unique([userId, application, type])
}

enum RoomFeature {
  OnlyLastMessage
  OnlyUserMessages
}
